# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  tag: 0.0.$(Build.BuildId)
  dockerhubrepositoryname: sulabh4

pool:
  vmImage: Default #ubuntu-latest

stages:
- stage: Build
  displayName: Build and Push Docker Images
  jobs:
  - job: Build
    displayName: Build
    pool: Default
    steps:
    # - task: Docker@2
    #   displayName: LogIn to DockerHub
    #   inputs:
    #     containerRegistry: 'DockerHub Codexponent'
    #     command: 'login'
    - task: Docker@2
      displayName: Build and Push to DockerHub
      inputs:
        containerRegistry: 'DockerHub Codexponent'
        repository: '$(dockerhubrepositoryname)/siri-lambda'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        # buildContext: $(Build.SourcesDirectory)
        tags: $(tag)
    # - task: Docker@2
    #   displayName: Build and Push Stop Instance to DockerHub
    #   inputs:
    #     containerRegistry: 'DockerHub Codexponent'
    #     repository: '$(dockerhubrepositoryname)/siri-lambda-stop'
    #     command: 'buildAndPush'
    #     Dockerfile: '**/Dockerfiles/stop_instance/Dockerfile'
    #     buildContext: $(Build.SourcesDirectory)
    #     tags: $(tag)
    - task: ECRPushImage@1
      displayName: Push to AWS ECR
      inputs:
        awsCredentials: 'AWS Codexponent'
        regionName: 'us-east-1'
        imageSource: 'imagename'
        sourceImageName: '$(dockerhubrepositoryname)/siri-lambda'
        sourceImageTag: '$(tag)'
        repositoryName: 'siri-lambda'
        pushTag: '$(tag)'
    # - task: ECRPushImage@1
    #   displayName: Push Stop Instance to AWS ECR
    #   inputs:
    #     awsCredentials: 'AWS Codexponent'
    #     regionName: 'us-east-1'
    #     imageSource: 'imagename'
    #     sourceImageName: '$(dockerhubrepositoryname)/siri-lambda-stop'
    #     sourceImageTag: '$(tag)'
    #     repositoryName: 'siri-lambda-stop'
    #     pushTag: '$(tag)'
    - task: AWSCLI@1
      displayName: Push to Start Lambda Function
      inputs:
        awsCredentials: 'AWS Codexponent'
        regionName: 'us-east-1'
        awsCommand: 'lambda'
        awsSubCommand: 'update-function-code'
        awsArguments: '--function-name siri-lambda-start --image-uri $(ec2-repo-name)/siri-lambda:$(tag)'
    - task: AWSCLI@1
      displayName: Push to Stop Lambda Function
      inputs:
        awsCredentials: 'AWS Codexponent'
        regionName: 'us-east-1'
        awsCommand: 'lambda'
        awsSubCommand: 'update-function-code'
        awsArguments: '--function-name siri-lambda-stop --image-uri $(ec2-repo-name)/siri-lambda:$(tag)'